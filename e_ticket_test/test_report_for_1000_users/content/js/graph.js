/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5735.0, "minX": 0.0, "maxY": 393420.0, "series": [{"data": [[0.0, 5735.0], [0.1, 6192.0], [0.2, 6511.0], [0.3, 6511.0], [0.4, 9249.0], [0.5, 10598.0], [0.6, 12134.0], [0.7, 12636.0], [0.8, 12822.0], [0.9, 12860.0], [1.0, 13161.0], [1.1, 14294.0], [1.2, 14321.0], [1.3, 14648.0], [1.4, 14648.0], [1.5, 15623.0], [1.6, 15708.0], [1.7, 16642.0], [1.8, 18324.0], [1.9, 18479.0], [2.0, 18941.0], [2.1, 19238.0], [2.2, 19740.0], [2.3, 19885.0], [2.4, 19916.0], [2.5, 20190.0], [2.6, 21426.0], [2.7, 21672.0], [2.8, 21825.0], [2.9, 22432.0], [3.0, 22931.0], [3.1, 25191.0], [3.2, 26179.0], [3.3, 26278.0], [3.4, 27553.0], [3.5, 27761.0], [3.6, 28321.0], [3.7, 28613.0], [3.8, 28810.0], [3.9, 29212.0], [4.0, 29993.0], [4.1, 30026.0], [4.2, 32003.0], [4.3, 32461.0], [4.4, 37675.0], [4.5, 37805.0], [4.6, 38410.0], [4.7, 39481.0], [4.8, 39566.0], [4.9, 41004.0], [5.0, 41291.0], [5.1, 41883.0], [5.2, 42216.0], [5.3, 42483.0], [5.4, 42562.0], [5.5, 42688.0], [5.6, 43677.0], [5.7, 43806.0], [5.8, 43883.0], [5.9, 44134.0], [6.0, 45330.0], [6.1, 45593.0], [6.2, 46042.0], [6.3, 46696.0], [6.4, 47425.0], [6.5, 47445.0], [6.6, 47597.0], [6.7, 47869.0], [6.8, 48321.0], [6.9, 48409.0], [7.0, 48631.0], [7.1, 48844.0], [7.2, 49255.0], [7.3, 49280.0], [7.4, 49309.0], [7.5, 49329.0], [7.6, 49358.0], [7.7, 49480.0], [7.8, 49654.0], [7.9, 49694.0], [8.0, 49863.0], [8.1, 49890.0], [8.2, 49943.0], [8.3, 49956.0], [8.4, 50190.0], [8.5, 50266.0], [8.6, 50485.0], [8.7, 50639.0], [8.8, 50930.0], [8.9, 51211.0], [9.0, 51408.0], [9.1, 51509.0], [9.2, 51522.0], [9.3, 51580.0], [9.4, 51605.0], [9.5, 51632.0], [9.6, 51644.0], [9.7, 51711.0], [9.8, 51808.0], [9.9, 52352.0], [10.0, 52396.0], [10.1, 52502.0], [10.2, 52861.0], [10.3, 52941.0], [10.4, 53008.0], [10.5, 53552.0], [10.6, 53582.0], [10.7, 53703.0], [10.8, 54144.0], [10.9, 54332.0], [11.0, 54534.0], [11.1, 54549.0], [11.2, 54553.0], [11.3, 54683.0], [11.4, 54834.0], [11.5, 54866.0], [11.6, 54988.0], [11.7, 55075.0], [11.8, 55149.0], [11.9, 55370.0], [12.0, 55533.0], [12.1, 55538.0], [12.2, 55575.0], [12.3, 55660.0], [12.4, 56048.0], [12.5, 56099.0], [12.6, 56260.0], [12.7, 56433.0], [12.8, 56494.0], [12.9, 56744.0], [13.0, 56789.0], [13.1, 56906.0], [13.2, 56967.0], [13.3, 57151.0], [13.4, 57237.0], [13.5, 57385.0], [13.6, 57511.0], [13.7, 57527.0], [13.8, 57627.0], [13.9, 57691.0], [14.0, 57719.0], [14.1, 57732.0], [14.2, 58050.0], [14.3, 58063.0], [14.4, 58089.0], [14.5, 58289.0], [14.6, 58299.0], [14.7, 58315.0], [14.8, 58418.0], [14.9, 58481.0], [15.0, 58524.0], [15.1, 58558.0], [15.2, 58610.0], [15.3, 58633.0], [15.4, 58761.0], [15.5, 58782.0], [15.6, 58787.0], [15.7, 58819.0], [15.8, 58832.0], [15.9, 58874.0], [16.0, 58976.0], [16.1, 58995.0], [16.2, 59026.0], [16.3, 59031.0], [16.4, 59052.0], [16.5, 59277.0], [16.6, 59324.0], [16.7, 59359.0], [16.8, 59367.0], [16.9, 59393.0], [17.0, 59466.0], [17.1, 59500.0], [17.2, 59517.0], [17.3, 59888.0], [17.4, 60041.0], [17.5, 60109.0], [17.6, 60141.0], [17.7, 60142.0], [17.8, 60148.0], [17.9, 60327.0], [18.0, 60392.0], [18.1, 60550.0], [18.2, 60552.0], [18.3, 60687.0], [18.4, 60761.0], [18.5, 60785.0], [18.6, 60892.0], [18.7, 60955.0], [18.8, 61036.0], [18.9, 61081.0], [19.0, 61136.0], [19.1, 61187.0], [19.2, 61187.0], [19.3, 61387.0], [19.4, 61411.0], [19.5, 61468.0], [19.6, 61663.0], [19.7, 61786.0], [19.8, 61849.0], [19.9, 61881.0], [20.0, 62081.0], [20.1, 62226.0], [20.2, 62231.0], [20.3, 62306.0], [20.4, 62455.0], [20.5, 62516.0], [20.6, 62530.0], [20.7, 62707.0], [20.8, 62812.0], [20.9, 62842.0], [21.0, 62873.0], [21.1, 63033.0], [21.2, 63123.0], [21.3, 63134.0], [21.4, 63309.0], [21.5, 63319.0], [21.6, 63851.0], [21.7, 63866.0], [21.8, 63914.0], [21.9, 63923.0], [22.0, 63997.0], [22.1, 64010.0], [22.2, 64105.0], [22.3, 64113.0], [22.4, 64167.0], [22.5, 64176.0], [22.6, 64255.0], [22.7, 64268.0], [22.8, 64474.0], [22.9, 64475.0], [23.0, 64521.0], [23.1, 64546.0], [23.2, 64627.0], [23.3, 64653.0], [23.4, 64913.0], [23.5, 64980.0], [23.6, 65103.0], [23.7, 65117.0], [23.8, 65127.0], [23.9, 65360.0], [24.0, 65539.0], [24.1, 65542.0], [24.2, 65838.0], [24.3, 66071.0], [24.4, 66091.0], [24.5, 66221.0], [24.6, 66327.0], [24.7, 66413.0], [24.8, 66512.0], [24.9, 66519.0], [25.0, 66591.0], [25.1, 66597.0], [25.2, 66599.0], [25.3, 66728.0], [25.4, 66743.0], [25.5, 66797.0], [25.6, 66860.0], [25.7, 66885.0], [25.8, 66890.0], [25.9, 66935.0], [26.0, 66945.0], [26.1, 66967.0], [26.2, 67198.0], [26.3, 67228.0], [26.4, 67231.0], [26.5, 67281.0], [26.6, 67304.0], [26.7, 67329.0], [26.8, 67369.0], [26.9, 67431.0], [27.0, 67470.0], [27.1, 67474.0], [27.2, 67489.0], [27.3, 67663.0], [27.4, 67664.0], [27.5, 67726.0], [27.6, 67744.0], [27.7, 67780.0], [27.8, 67844.0], [27.9, 67897.0], [28.0, 67986.0], [28.1, 68064.0], [28.2, 68080.0], [28.3, 68146.0], [28.4, 68147.0], [28.5, 68171.0], [28.6, 68220.0], [28.7, 68220.0], [28.8, 68220.0], [28.9, 68250.0], [29.0, 68331.0], [29.1, 68414.0], [29.2, 68429.0], [29.3, 68434.0], [29.4, 68485.0], [29.5, 68494.0], [29.6, 68496.0], [29.7, 68574.0], [29.8, 68577.0], [29.9, 68625.0], [30.0, 68644.0], [30.1, 68706.0], [30.2, 68746.0], [30.3, 68798.0], [30.4, 68866.0], [30.5, 68888.0], [30.6, 68934.0], [30.7, 68941.0], [30.8, 68969.0], [30.9, 68988.0], [31.0, 69009.0], [31.1, 69058.0], [31.2, 69065.0], [31.3, 69094.0], [31.4, 69163.0], [31.5, 69167.0], [31.6, 69180.0], [31.7, 69230.0], [31.8, 69341.0], [31.9, 69547.0], [32.0, 69616.0], [32.1, 69675.0], [32.2, 69716.0], [32.3, 69727.0], [32.4, 69732.0], [32.5, 69778.0], [32.6, 69797.0], [32.7, 69883.0], [32.8, 69926.0], [32.9, 69959.0], [33.0, 69972.0], [33.1, 69994.0], [33.2, 70003.0], [33.3, 70020.0], [33.4, 70026.0], [33.5, 70043.0], [33.6, 70073.0], [33.7, 70100.0], [33.8, 70206.0], [33.9, 70265.0], [34.0, 70385.0], [34.1, 70428.0], [34.2, 70492.0], [34.3, 70539.0], [34.4, 70544.0], [34.5, 70552.0], [34.6, 70594.0], [34.7, 70599.0], [34.8, 70665.0], [34.9, 70667.0], [35.0, 70705.0], [35.1, 70720.0], [35.2, 70723.0], [35.3, 70852.0], [35.4, 70871.0], [35.5, 70893.0], [35.6, 70949.0], [35.7, 70952.0], [35.8, 70959.0], [35.9, 70992.0], [36.0, 71015.0], [36.1, 71071.0], [36.2, 71107.0], [36.3, 71115.0], [36.4, 71136.0], [36.5, 71164.0], [36.6, 71192.0], [36.7, 71199.0], [36.8, 71218.0], [36.9, 71219.0], [37.0, 71227.0], [37.1, 71237.0], [37.2, 71261.0], [37.3, 71271.0], [37.4, 71317.0], [37.5, 71327.0], [37.6, 71340.0], [37.7, 71346.0], [37.8, 71349.0], [37.9, 71399.0], [38.0, 71510.0], [38.1, 71526.0], [38.2, 71546.0], [38.3, 71554.0], [38.4, 71609.0], [38.5, 71699.0], [38.6, 71711.0], [38.7, 71785.0], [38.8, 71860.0], [38.9, 71861.0], [39.0, 71917.0], [39.1, 71982.0], [39.2, 72034.0], [39.3, 72037.0], [39.4, 72197.0], [39.5, 72284.0], [39.6, 72348.0], [39.7, 72431.0], [39.8, 72461.0], [39.9, 72472.0], [40.0, 72473.0], [40.1, 72571.0], [40.2, 72613.0], [40.3, 72622.0], [40.4, 72625.0], [40.5, 72631.0], [40.6, 72651.0], [40.7, 72674.0], [40.8, 72849.0], [40.9, 72955.0], [41.0, 73142.0], [41.1, 73160.0], [41.2, 73192.0], [41.3, 73202.0], [41.4, 73414.0], [41.5, 73446.0], [41.6, 73489.0], [41.7, 73510.0], [41.8, 73606.0], [41.9, 73609.0], [42.0, 73683.0], [42.1, 73757.0], [42.2, 73892.0], [42.3, 74327.0], [42.4, 74407.0], [42.5, 74431.0], [42.6, 74457.0], [42.7, 74490.0], [42.8, 74498.0], [42.9, 74514.0], [43.0, 74540.0], [43.1, 74659.0], [43.2, 74711.0], [43.3, 74795.0], [43.4, 74901.0], [43.5, 74983.0], [43.6, 75050.0], [43.7, 75120.0], [43.8, 75143.0], [43.9, 75153.0], [44.0, 75227.0], [44.1, 75246.0], [44.2, 75246.0], [44.3, 75246.0], [44.4, 75314.0], [44.5, 75407.0], [44.6, 75503.0], [44.7, 75599.0], [44.8, 75658.0], [44.9, 75683.0], [45.0, 75774.0], [45.1, 75829.0], [45.2, 75888.0], [45.3, 75931.0], [45.4, 75937.0], [45.5, 75952.0], [45.6, 76033.0], [45.7, 76059.0], [45.8, 76077.0], [45.9, 76294.0], [46.0, 76543.0], [46.1, 76574.0], [46.2, 76635.0], [46.3, 76688.0], [46.4, 76712.0], [46.5, 76731.0], [46.6, 76773.0], [46.7, 76789.0], [46.8, 76810.0], [46.9, 77026.0], [47.0, 77031.0], [47.1, 77072.0], [47.2, 77074.0], [47.3, 77099.0], [47.4, 77129.0], [47.5, 77225.0], [47.6, 77240.0], [47.7, 77324.0], [47.8, 77423.0], [47.9, 77431.0], [48.0, 77457.0], [48.1, 77485.0], [48.2, 77567.0], [48.3, 77636.0], [48.4, 77679.0], [48.5, 77759.0], [48.6, 77787.0], [48.7, 77790.0], [48.8, 77793.0], [48.9, 77803.0], [49.0, 77805.0], [49.1, 77812.0], [49.2, 77898.0], [49.3, 77926.0], [49.4, 77945.0], [49.5, 77984.0], [49.6, 77998.0], [49.7, 78048.0], [49.8, 78073.0], [49.9, 78108.0], [50.0, 78202.0], [50.1, 78231.0], [50.2, 78270.0], [50.3, 78270.0], [50.4, 78296.0], [50.5, 78332.0], [50.6, 78339.0], [50.7, 78404.0], [50.8, 78416.0], [50.9, 78475.0], [51.0, 78597.0], [51.1, 78646.0], [51.2, 78653.0], [51.3, 78665.0], [51.4, 78675.0], [51.5, 78683.0], [51.6, 78706.0], [51.7, 78795.0], [51.8, 78973.0], [51.9, 78975.0], [52.0, 78978.0], [52.1, 78987.0], [52.2, 78990.0], [52.3, 79015.0], [52.4, 79041.0], [52.5, 79060.0], [52.6, 79098.0], [52.7, 79150.0], [52.8, 79153.0], [52.9, 79185.0], [53.0, 79187.0], [53.1, 79251.0], [53.2, 79311.0], [53.3, 79350.0], [53.4, 79357.0], [53.5, 79369.0], [53.6, 79390.0], [53.7, 79453.0], [53.8, 79483.0], [53.9, 79490.0], [54.0, 79556.0], [54.1, 79653.0], [54.2, 79718.0], [54.3, 79755.0], [54.4, 79800.0], [54.5, 79852.0], [54.6, 79866.0], [54.7, 79943.0], [54.8, 79983.0], [54.9, 79985.0], [55.0, 80004.0], [55.1, 80132.0], [55.2, 80149.0], [55.3, 80213.0], [55.4, 80237.0], [55.5, 80266.0], [55.6, 80266.0], [55.7, 80311.0], [55.8, 80329.0], [55.9, 80391.0], [56.0, 80399.0], [56.1, 80400.0], [56.2, 80403.0], [56.3, 80456.0], [56.4, 80658.0], [56.5, 80685.0], [56.6, 80713.0], [56.7, 80738.0], [56.8, 80781.0], [56.9, 80786.0], [57.0, 80819.0], [57.1, 80851.0], [57.2, 80874.0], [57.3, 80921.0], [57.4, 81004.0], [57.5, 81101.0], [57.6, 81135.0], [57.7, 81147.0], [57.8, 81180.0], [57.9, 81193.0], [58.0, 81248.0], [58.1, 81354.0], [58.2, 81410.0], [58.3, 81534.0], [58.4, 81564.0], [58.5, 81576.0], [58.6, 81576.0], [58.7, 81685.0], [58.8, 81753.0], [58.9, 81815.0], [59.0, 81860.0], [59.1, 81886.0], [59.2, 81984.0], [59.3, 82045.0], [59.4, 82066.0], [59.5, 82073.0], [59.6, 82081.0], [59.7, 82260.0], [59.8, 82269.0], [59.9, 82277.0], [60.0, 82283.0], [60.1, 82337.0], [60.2, 82339.0], [60.3, 82449.0], [60.4, 82485.0], [60.5, 82541.0], [60.6, 82563.0], [60.7, 82568.0], [60.8, 82574.0], [60.9, 82579.0], [61.0, 82759.0], [61.1, 82809.0], [61.2, 82857.0], [61.3, 82864.0], [61.4, 82917.0], [61.5, 82942.0], [61.6, 83050.0], [61.7, 83165.0], [61.8, 83168.0], [61.9, 83243.0], [62.0, 83301.0], [62.1, 83311.0], [62.2, 83498.0], [62.3, 83500.0], [62.4, 83614.0], [62.5, 83683.0], [62.6, 83698.0], [62.7, 83727.0], [62.8, 83755.0], [62.9, 83774.0], [63.0, 83894.0], [63.1, 84004.0], [63.2, 84010.0], [63.3, 84120.0], [63.4, 84128.0], [63.5, 84328.0], [63.6, 84356.0], [63.7, 84373.0], [63.8, 84400.0], [63.9, 84524.0], [64.0, 84556.0], [64.1, 84570.0], [64.2, 84571.0], [64.3, 84625.0], [64.4, 84699.0], [64.5, 84736.0], [64.6, 84759.0], [64.7, 84759.0], [64.8, 84827.0], [64.9, 84875.0], [65.0, 84972.0], [65.1, 84999.0], [65.2, 85017.0], [65.3, 85036.0], [65.4, 85254.0], [65.5, 85259.0], [65.6, 85338.0], [65.7, 85377.0], [65.8, 85383.0], [65.9, 85575.0], [66.0, 85590.0], [66.1, 85636.0], [66.2, 85655.0], [66.3, 85660.0], [66.4, 85683.0], [66.5, 85731.0], [66.6, 85736.0], [66.7, 85839.0], [66.8, 85848.0], [66.9, 85908.0], [67.0, 85986.0], [67.1, 86001.0], [67.2, 86037.0], [67.3, 86050.0], [67.4, 86082.0], [67.5, 86091.0], [67.6, 86141.0], [67.7, 86164.0], [67.8, 86183.0], [67.9, 86281.0], [68.0, 86287.0], [68.1, 86287.0], [68.2, 86324.0], [68.3, 86346.0], [68.4, 86360.0], [68.5, 86429.0], [68.6, 86467.0], [68.7, 86613.0], [68.8, 86614.0], [68.9, 86626.0], [69.0, 86632.0], [69.1, 86717.0], [69.2, 86720.0], [69.3, 86732.0], [69.4, 86761.0], [69.5, 86777.0], [69.6, 86804.0], [69.7, 86810.0], [69.8, 86913.0], [69.9, 86913.0], [70.0, 86921.0], [70.1, 86943.0], [70.2, 87043.0], [70.3, 87093.0], [70.4, 87105.0], [70.5, 87121.0], [70.6, 87169.0], [70.7, 87176.0], [70.8, 87311.0], [70.9, 87315.0], [71.0, 87385.0], [71.1, 87397.0], [71.2, 87400.0], [71.3, 87401.0], [71.4, 87415.0], [71.5, 87508.0], [71.6, 87653.0], [71.7, 87687.0], [71.8, 87726.0], [71.9, 87735.0], [72.0, 87745.0], [72.1, 87823.0], [72.2, 87839.0], [72.3, 87875.0], [72.4, 87889.0], [72.5, 87929.0], [72.6, 87949.0], [72.7, 88037.0], [72.8, 88062.0], [72.9, 88063.0], [73.0, 88069.0], [73.1, 88093.0], [73.2, 88094.0], [73.3, 88158.0], [73.4, 88165.0], [73.5, 88185.0], [73.6, 88288.0], [73.7, 88301.0], [73.8, 88367.0], [73.9, 88407.0], [74.0, 88443.0], [74.1, 88516.0], [74.2, 88522.0], [74.3, 88562.0], [74.4, 88592.0], [74.5, 88598.0], [74.6, 88659.0], [74.7, 88675.0], [74.8, 88687.0], [74.9, 88698.0], [75.0, 88716.0], [75.1, 88843.0], [75.2, 88848.0], [75.3, 88894.0], [75.4, 88935.0], [75.5, 88959.0], [75.6, 88984.0], [75.7, 89005.0], [75.8, 89033.0], [75.9, 89062.0], [76.0, 89173.0], [76.1, 89196.0], [76.2, 89248.0], [76.3, 89273.0], [76.4, 89407.0], [76.5, 89408.0], [76.6, 89439.0], [76.7, 89441.0], [76.8, 89445.0], [76.9, 89465.0], [77.0, 89525.0], [77.1, 89646.0], [77.2, 89660.0], [77.3, 89719.0], [77.4, 89724.0], [77.5, 89738.0], [77.6, 89746.0], [77.7, 89772.0], [77.8, 89822.0], [77.9, 89839.0], [78.0, 89946.0], [78.1, 89969.0], [78.2, 90005.0], [78.3, 90154.0], [78.4, 90159.0], [78.5, 90167.0], [78.6, 90212.0], [78.7, 90344.0], [78.8, 90363.0], [78.9, 90417.0], [79.0, 90425.0], [79.1, 90503.0], [79.2, 90677.0], [79.3, 90712.0], [79.4, 90713.0], [79.5, 90730.0], [79.6, 90737.0], [79.7, 90915.0], [79.8, 90961.0], [79.9, 91065.0], [80.0, 91246.0], [80.1, 91284.0], [80.2, 91561.0], [80.3, 91578.0], [80.4, 91628.0], [80.5, 91632.0], [80.6, 91674.0], [80.7, 91676.0], [80.8, 91716.0], [80.9, 91812.0], [81.0, 91866.0], [81.1, 92049.0], [81.2, 92110.0], [81.3, 92158.0], [81.4, 92178.0], [81.5, 92237.0], [81.6, 92266.0], [81.7, 92276.0], [81.8, 92292.0], [81.9, 92650.0], [82.0, 92714.0], [82.1, 92806.0], [82.2, 92958.0], [82.3, 93165.0], [82.4, 93211.0], [82.5, 93237.0], [82.6, 93329.0], [82.7, 93383.0], [82.8, 93393.0], [82.9, 93868.0], [83.0, 93879.0], [83.1, 93968.0], [83.2, 94125.0], [83.3, 94156.0], [83.4, 94249.0], [83.5, 94626.0], [83.6, 94647.0], [83.7, 94731.0], [83.8, 95212.0], [83.9, 95341.0], [84.0, 95444.0], [84.1, 95449.0], [84.2, 95594.0], [84.3, 95709.0], [84.4, 96055.0], [84.5, 96076.0], [84.6, 96135.0], [84.7, 96174.0], [84.8, 96238.0], [84.9, 96324.0], [85.0, 96551.0], [85.1, 96582.0], [85.2, 96603.0], [85.3, 96804.0], [85.4, 96900.0], [85.5, 97012.0], [85.6, 97127.0], [85.7, 97146.0], [85.8, 97243.0], [85.9, 97300.0], [86.0, 97306.0], [86.1, 97711.0], [86.2, 97734.0], [86.3, 97815.0], [86.4, 97957.0], [86.5, 98316.0], [86.6, 98322.0], [86.7, 98437.0], [86.8, 98462.0], [86.9, 98499.0], [87.0, 98548.0], [87.1, 98567.0], [87.2, 98580.0], [87.3, 98602.0], [87.4, 98669.0], [87.5, 98743.0], [87.6, 98940.0], [87.7, 99044.0], [87.8, 99056.0], [87.9, 99178.0], [88.0, 99209.0], [88.1, 99671.0], [88.2, 99924.0], [88.3, 100039.0], [88.4, 100066.0], [88.5, 100272.0], [88.6, 100960.0], [88.7, 101397.0], [88.8, 101595.0], [88.9, 101663.0], [89.0, 101754.0], [89.1, 101777.0], [89.2, 101960.0], [89.3, 102188.0], [89.4, 102298.0], [89.5, 102350.0], [89.6, 102398.0], [89.7, 102878.0], [89.8, 103060.0], [89.9, 103390.0], [90.0, 103596.0], [90.1, 103622.0], [90.2, 103665.0], [90.3, 103803.0], [90.4, 103942.0], [90.5, 104255.0], [90.6, 105150.0], [90.7, 105285.0], [90.8, 105452.0], [90.9, 105455.0], [91.0, 105643.0], [91.1, 105811.0], [91.2, 105906.0], [91.3, 106325.0], [91.4, 106395.0], [91.5, 106968.0], [91.6, 107596.0], [91.7, 107616.0], [91.8, 107630.0], [91.9, 107631.0], [92.0, 107911.0], [92.1, 108198.0], [92.2, 108338.0], [92.3, 108368.0], [92.4, 108458.0], [92.5, 108532.0], [92.6, 108687.0], [92.7, 108870.0], [92.8, 108944.0], [92.9, 108966.0], [93.0, 109276.0], [93.1, 109323.0], [93.2, 109329.0], [93.3, 109347.0], [93.4, 109406.0], [93.5, 109707.0], [93.6, 110016.0], [93.7, 110024.0], [93.8, 110037.0], [93.9, 110125.0], [94.0, 110147.0], [94.1, 110249.0], [94.2, 110259.0], [94.3, 110848.0], [94.4, 111240.0], [94.5, 111510.0], [94.6, 111624.0], [94.7, 111803.0], [94.8, 112248.0], [94.9, 112275.0], [95.0, 112518.0], [95.1, 112689.0], [95.2, 112856.0], [95.3, 113091.0], [95.4, 113109.0], [95.5, 113334.0], [95.6, 113352.0], [95.7, 113958.0], [95.8, 114208.0], [95.9, 114643.0], [96.0, 114690.0], [96.1, 114800.0], [96.2, 115281.0], [96.3, 116396.0], [96.4, 116660.0], [96.5, 117453.0], [96.6, 118889.0], [96.7, 119696.0], [96.8, 121415.0], [96.9, 121530.0], [97.0, 122561.0], [97.1, 124380.0], [97.2, 124567.0], [97.3, 124661.0], [97.4, 124859.0], [97.5, 125550.0], [97.6, 125695.0], [97.7, 126819.0], [97.8, 127890.0], [97.9, 127918.0], [98.0, 129301.0], [98.1, 129474.0], [98.2, 129721.0], [98.3, 129936.0], [98.4, 132979.0], [98.5, 133171.0], [98.6, 134298.0], [98.7, 134402.0], [98.8, 137590.0], [98.9, 140486.0], [99.0, 141461.0], [99.1, 157137.0], [99.2, 168180.0], [99.3, 169389.0], [99.4, 174603.0], [99.5, 177156.0], [99.6, 179287.0], [99.7, 179526.0], [99.8, 189835.0], [99.9, 393420.0]], "isOverall": false, "label": "hit_search_trains", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 5700.0, "maxY": 6.0, "series": [{"data": [[132900.0, 1.0], [168100.0, 1.0], [66700.0, 3.0], [68300.0, 1.0], [69900.0, 4.0], [71500.0, 4.0], [73100.0, 3.0], [74700.0, 2.0], [77900.0, 4.0], [79500.0, 1.0], [81100.0, 5.0], [82700.0, 1.0], [85900.0, 2.0], [84300.0, 3.0], [87500.0, 1.0], [89100.0, 2.0], [90700.0, 4.0], [93900.0, 1.0], [95500.0, 1.0], [97100.0, 2.0], [98700.0, 1.0], [101900.0, 1.0], [103500.0, 1.0], [105100.0, 1.0], [108300.0, 2.0], [111500.0, 1.0], [113100.0, 1.0], [116300.0, 1.0], [124300.0, 1.0], [157100.0, 1.0], [42500.0, 1.0], [44100.0, 1.0], [179500.0, 1.0], [52900.0, 1.0], [53700.0, 1.0], [54500.0, 3.0], [55300.0, 1.0], [56900.0, 2.0], [57700.0, 2.0], [59300.0, 4.0], [58500.0, 2.0], [60100.0, 4.0], [60900.0, 1.0], [63300.0, 2.0], [62500.0, 2.0], [61700.0, 1.0], [64100.0, 4.0], [64900.0, 2.0], [67400.0, 4.0], [65800.0, 1.0], [69000.0, 4.0], [70600.0, 2.0], [72200.0, 1.0], [73800.0, 1.0], [77000.0, 5.0], [75400.0, 1.0], [78600.0, 5.0], [80200.0, 4.0], [81800.0, 3.0], [83400.0, 1.0], [85000.0, 2.0], [86600.0, 4.0], [88200.0, 1.0], [89800.0, 2.0], [94600.0, 2.0], [96200.0, 1.0], [97800.0, 1.0], [104200.0, 1.0], [105800.0, 1.0], [112200.0, 2.0], [66500.0, 5.0], [68100.0, 3.0], [69700.0, 5.0], [71300.0, 6.0], [72900.0, 1.0], [74500.0, 2.0], [77700.0, 4.0], [79300.0, 5.0], [80900.0, 1.0], [82500.0, 5.0], [84100.0, 2.0], [85700.0, 2.0], [87300.0, 4.0], [88900.0, 4.0], [5700.0, 1.0], [90500.0, 1.0], [92100.0, 3.0], [6100.0, 1.0], [96900.0, 1.0], [95300.0, 1.0], [98500.0, 3.0], [101700.0, 2.0], [6500.0, 1.0], [103300.0, 1.0], [108100.0, 1.0], [109700.0, 1.0], [122500.0, 1.0], [134200.0, 1.0], [8800.0, 1.0], [9200.0, 1.0], [12600.0, 1.0], [12800.0, 2.0], [14200.0, 1.0], [14600.0, 1.0], [15600.0, 1.0], [18400.0, 1.0], [19200.0, 1.0], [21600.0, 1.0], [22400.0, 1.0], [28800.0, 1.0], [29200.0, 1.0], [30000.0, 1.0], [32400.0, 1.0], [32000.0, 1.0], [37600.0, 1.0], [38400.0, 1.0], [42400.0, 1.0], [48800.0, 1.0], [49600.0, 2.0], [50400.0, 1.0], [51200.0, 1.0], [52800.0, 1.0], [56000.0, 2.0], [58400.0, 2.0], [57600.0, 2.0], [59200.0, 1.0], [60800.0, 1.0], [60000.0, 1.0], [61600.0, 1.0], [62400.0, 1.0], [64000.0, 1.0], [67200.0, 3.0], [68800.0, 2.0], [70400.0, 2.0], [72000.0, 2.0], [73600.0, 3.0], [75200.0, 4.0], [76800.0, 1.0], [78400.0, 3.0], [80000.0, 1.0], [81600.0, 1.0], [84800.0, 2.0], [83200.0, 1.0], [86400.0, 2.0], [88000.0, 6.0], [89600.0, 2.0], [91200.0, 2.0], [92800.0, 1.0], [96000.0, 2.0], [99200.0, 1.0], [105600.0, 1.0], [108800.0, 1.0], [115200.0, 1.0], [124800.0, 1.0], [134400.0, 1.0], [179200.0, 1.0], [67100.0, 1.0], [68700.0, 3.0], [70300.0, 1.0], [73500.0, 1.0], [71900.0, 2.0], [75100.0, 3.0], [76700.0, 4.0], [78300.0, 2.0], [81500.0, 4.0], [79900.0, 3.0], [83100.0, 2.0], [84700.0, 3.0], [86300.0, 3.0], [87900.0, 2.0], [89500.0, 1.0], [92700.0, 1.0], [102300.0, 2.0], [99100.0, 1.0], [103900.0, 1.0], [121500.0, 1.0], [127900.0, 1.0], [174600.0, 1.0], [37100.0, 1.0], [39500.0, 1.0], [47500.0, 1.0], [48300.0, 1.0], [49900.0, 2.0], [51500.0, 3.0], [52300.0, 2.0], [55500.0, 3.0], [57100.0, 1.0], [58700.0, 3.0], [60300.0, 2.0], [59500.0, 2.0], [61100.0, 2.0], [62700.0, 1.0], [65100.0, 3.0], [66200.0, 1.0], [67800.0, 2.0], [71000.0, 2.0], [72600.0, 6.0], [75800.0, 2.0], [77400.0, 4.0], [79000.0, 4.0], [80600.0, 2.0], [82200.0, 4.0], [83800.0, 1.0], [87000.0, 2.0], [88600.0, 4.0], [90200.0, 1.0], [91800.0, 2.0], [96600.0, 1.0], [103000.0, 1.0], [109400.0, 1.0], [112600.0, 1.0], [114200.0, 1.0], [117400.0, 1.0], [66900.0, 3.0], [68500.0, 2.0], [71700.0, 2.0], [70100.0, 1.0], [74900.0, 2.0], [76500.0, 2.0], [78100.0, 1.0], [79700.0, 2.0], [81300.0, 1.0], [84500.0, 4.0], [82900.0, 2.0], [86100.0, 3.0], [87700.0, 3.0], [90900.0, 2.0], [94100.0, 2.0], [95700.0, 1.0], [97300.0, 2.0], [98900.0, 1.0], [102100.0, 1.0], [106900.0, 1.0], [110100.0, 2.0], [108500.0, 1.0], [113300.0, 2.0], [124500.0, 1.0], [129300.0, 1.0], [18900.0, 1.0], [19700.0, 1.0], [20100.0, 1.0], [22900.0, 1.0], [26100.0, 1.0], [27700.0, 1.0], [137500.0, 1.0], [37800.0, 1.0], [39400.0, 1.0], [41000.0, 1.0], [41800.0, 1.0], [42600.0, 1.0], [46600.0, 1.0], [47400.0, 2.0], [49800.0, 2.0], [50600.0, 1.0], [51400.0, 1.0], [53000.0, 1.0], [54600.0, 1.0], [56200.0, 1.0], [58600.0, 2.0], [59400.0, 1.0], [61000.0, 2.0], [61800.0, 2.0], [64200.0, 2.0], [66000.0, 2.0], [67600.0, 2.0], [69200.0, 1.0], [70800.0, 3.0], [72400.0, 4.0], [75600.0, 2.0], [77200.0, 2.0], [80400.0, 3.0], [82000.0, 4.0], [83600.0, 3.0], [85200.0, 2.0], [86800.0, 2.0], [88400.0, 2.0], [90000.0, 1.0], [91600.0, 4.0], [93200.0, 2.0], [99600.0, 1.0], [102800.0, 1.0], [107600.0, 3.0], [109200.0, 1.0], [110800.0, 1.0], [118800.0, 1.0], [126800.0, 1.0], [69100.0, 3.0], [70700.0, 3.0], [72300.0, 1.0], [77100.0, 1.0], [75500.0, 2.0], [78700.0, 2.0], [80300.0, 4.0], [81900.0, 1.0], [83500.0, 1.0], [86700.0, 5.0], [88300.0, 2.0], [89900.0, 2.0], [91500.0, 2.0], [93100.0, 1.0], [94700.0, 1.0], [96300.0, 1.0], [97900.0, 1.0], [105900.0, 1.0], [107500.0, 1.0], [113900.0, 1.0], [129900.0, 1.0], [189800.0, 1.0], [133100.0, 1.0], [45300.0, 1.0], [49300.0, 3.0], [50900.0, 1.0], [50100.0, 1.0], [52500.0, 1.0], [51700.0, 1.0], [54100.0, 1.0], [54900.0, 1.0], [57300.0, 1.0], [58900.0, 2.0], [60500.0, 2.0], [61300.0, 1.0], [64500.0, 2.0], [65300.0, 1.0], [68200.0, 4.0], [69800.0, 1.0], [76200.0, 1.0], [74600.0, 1.0], [77800.0, 4.0], [79400.0, 3.0], [81000.0, 1.0], [85800.0, 2.0], [87400.0, 3.0], [89000.0, 3.0], [90600.0, 1.0], [92200.0, 4.0], [93800.0, 2.0], [95400.0, 2.0], [97000.0, 1.0], [98600.0, 2.0], [100200.0, 1.0], [114600.0, 2.0], [113000.0, 1.0], [140400.0, 1.0], [67300.0, 3.0], [68900.0, 4.0], [70500.0, 5.0], [72100.0, 1.0], [73700.0, 1.0], [75300.0, 1.0], [78500.0, 1.0], [80100.0, 2.0], [81700.0, 1.0], [83300.0, 2.0], [84900.0, 2.0], [89700.0, 5.0], [88100.0, 3.0], [92900.0, 1.0], [96100.0, 2.0], [97700.0, 2.0], [100900.0, 1.0], [108900.0, 2.0], [129700.0, 1.0], [10500.0, 1.0], [12100.0, 1.0], [13100.0, 1.0], [14300.0, 1.0], [15700.0, 1.0], [16600.0, 1.0], [19800.0, 1.0], [21400.0, 1.0], [21800.0, 1.0], [26200.0, 1.0], [28600.0, 1.0], [41200.0, 1.0], [43600.0, 1.0], [46000.0, 1.0], [48400.0, 1.0], [49200.0, 2.0], [51600.0, 3.0], [54800.0, 2.0], [55600.0, 1.0], [56400.0, 2.0], [57200.0, 1.0], [58800.0, 3.0], [58000.0, 3.0], [62800.0, 3.0], [62000.0, 1.0], [64400.0, 2.0], [66400.0, 1.0], [68000.0, 2.0], [69600.0, 2.0], [71200.0, 6.0], [72800.0, 1.0], [74400.0, 5.0], [76000.0, 3.0], [77600.0, 2.0], [80800.0, 3.0], [79200.0, 1.0], [82400.0, 2.0], [85600.0, 4.0], [84000.0, 2.0], [88800.0, 3.0], [90400.0, 2.0], [92000.0, 1.0], [95200.0, 1.0], [96800.0, 1.0], [98400.0, 3.0], [100000.0, 2.0], [101600.0, 1.0], [111200.0, 1.0], [112800.0, 1.0], [125600.0, 1.0], [66300.0, 1.0], [67900.0, 1.0], [69500.0, 1.0], [71100.0, 6.0], [74300.0, 1.0], [75900.0, 3.0], [77500.0, 1.0], [79100.0, 4.0], [80700.0, 4.0], [82300.0, 2.0], [85500.0, 2.0], [87100.0, 4.0], [88700.0, 1.0], [90300.0, 2.0], [98300.0, 2.0], [101500.0, 1.0], [99900.0, 1.0], [106300.0, 2.0], [107900.0, 1.0], [125500.0, 1.0], [177100.0, 1.0], [45500.0, 1.0], [53500.0, 2.0], [55100.0, 1.0], [54300.0, 1.0], [56700.0, 2.0], [57500.0, 2.0], [58300.0, 1.0], [60700.0, 2.0], [62300.0, 1.0], [63100.0, 2.0], [63900.0, 3.0], [65500.0, 2.0], [68600.0, 2.0], [70200.0, 2.0], [71800.0, 2.0], [73400.0, 3.0], [75000.0, 1.0], [76600.0, 2.0], [78200.0, 5.0], [79800.0, 3.0], [81400.0, 1.0], [83000.0, 1.0], [84600.0, 2.0], [86200.0, 3.0], [87800.0, 4.0], [89400.0, 6.0], [91000.0, 1.0], [92600.0, 1.0], [94200.0, 1.0], [99000.0, 2.0], [102200.0, 1.0], [103800.0, 1.0], [105400.0, 2.0], [108600.0, 1.0], [110200.0, 2.0], [111800.0, 1.0], [116600.0, 1.0], [121400.0, 1.0], [124600.0, 1.0], [127800.0, 1.0], [129400.0, 1.0], [169300.0, 1.0], [67700.0, 3.0], [69300.0, 1.0], [70900.0, 4.0], [72500.0, 1.0], [75700.0, 1.0], [77300.0, 1.0], [78900.0, 5.0], [83700.0, 3.0], [85300.0, 3.0], [86900.0, 4.0], [88500.0, 5.0], [90100.0, 3.0], [91700.0, 1.0], [93300.0, 3.0], [96500.0, 2.0], [101300.0, 1.0], [109300.0, 3.0], [112500.0, 1.0], [141400.0, 1.0], [18300.0, 1.0], [19900.0, 1.0], [25100.0, 1.0], [27500.0, 1.0], [28300.0, 1.0], [29900.0, 1.0], [42200.0, 1.0], [43800.0, 2.0], [48600.0, 1.0], [47800.0, 1.0], [49400.0, 1.0], [50200.0, 1.0], [51800.0, 1.0], [55000.0, 1.0], [58200.0, 2.0], [59000.0, 3.0], [60600.0, 1.0], [61400.0, 2.0], [59800.0, 1.0], [62200.0, 2.0], [63000.0, 1.0], [64600.0, 2.0], [63800.0, 2.0], [66800.0, 3.0], [68400.0, 6.0], [70000.0, 5.0], [71600.0, 2.0], [73200.0, 1.0], [78000.0, 2.0], [79600.0, 1.0], [81200.0, 1.0], [82800.0, 3.0], [84400.0, 1.0], [86000.0, 5.0], [89200.0, 2.0], [87600.0, 2.0], [97200.0, 1.0], [393400.0, 1.0], [105200.0, 1.0], [103600.0, 2.0], [108400.0, 1.0], [110000.0, 3.0], [111600.0, 1.0], [114800.0, 1.0], [119600.0, 1.0]], "isOverall": false, "label": "hit_search_trains", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 393400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 998.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 998.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.67437686E12, "maxY": 901.5404040404043, "series": [{"data": [[1.67437698E12, 16.5], [1.67437686E12, 901.5404040404043], [1.67437722E12, 1.0], [1.67437704E12, 2.0], [1.67437692E12, 416.5686528497406]], "isOverall": false, "label": "Search_tickets", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67437722E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5735.0, "minX": 1.0, "maxY": 393420.0, "series": [{"data": [[2.0, 189835.0], [3.0, 179287.0], [4.0, 179526.0], [5.0, 177156.0], [6.0, 174603.0], [7.0, 168180.0], [8.0, 169389.0], [9.0, 157137.0], [10.0, 141461.0], [11.0, 140486.0], [12.0, 137590.0], [13.0, 134402.0], [14.0, 133171.0], [15.0, 132979.0], [16.0, 134298.0], [17.0, 129474.0], [18.0, 129721.0], [19.0, 129936.0], [20.0, 129301.0], [21.0, 126819.0], [22.0, 127918.0], [23.0, 127890.0], [24.0, 124380.0], [25.0, 125695.0], [26.0, 125550.0], [27.0, 124859.0], [28.0, 124567.0], [29.0, 124661.0], [30.0, 121415.0], [31.0, 121530.0], [33.0, 119696.0], [32.0, 122561.0], [35.0, 116396.0], [34.0, 118889.0], [37.0, 116660.0], [36.0, 114800.0], [39.0, 115281.0], [38.0, 117453.0], [41.0, 114208.0], [40.0, 113091.0], [43.0, 112856.0], [42.0, 114690.0], [45.0, 113334.0], [44.0, 112248.0], [47.0, 113352.0], [46.0, 113109.0], [49.0, 114643.0], [48.0, 113958.0], [51.0, 112275.0], [50.0, 112518.0], [53.0, 110249.0], [52.0, 112689.0], [55.0, 109329.0], [54.0, 110848.0], [57.0, 111803.0], [56.0, 110259.0], [58.0, 110125.0], [61.0, 110024.0], [60.0, 110458.0], [63.0, 109323.0], [62.0, 108944.0], [67.0, 108870.0], [66.0, 108687.0], [65.0, 111624.0], [64.0, 108966.0], [71.0, 111240.0], [70.0, 107616.0], [69.0, 110016.0], [68.0, 109347.0], [75.0, 108198.0], [74.0, 110037.0], [73.0, 109707.0], [72.0, 108532.0], [79.0, 107596.0], [78.0, 109276.0], [77.0, 110147.0], [76.0, 107911.0], [83.0, 106968.0], [82.0, 105811.0], [81.0, 106325.0], [80.0, 108338.0], [87.0, 108368.0], [86.0, 105455.0], [85.0, 107630.0], [84.0, 105906.0], [91.0, 105452.0], [90.0, 105150.0], [89.0, 107631.0], [88.0, 108458.0], [95.0, 103942.0], [94.0, 105643.0], [93.0, 104255.0], [92.0, 106395.0], [99.0, 105285.0], [98.0, 103665.0], [97.0, 103622.0], [96.0, 103060.0], [103.0, 101960.0], [102.0, 101754.0], [101.0, 103803.0], [100.0, 102398.0], [107.0, 101397.0], [106.0, 103596.0], [105.0, 101777.0], [104.0, 103390.0], [111.0, 100066.0], [110.0, 102878.0], [109.0, 102188.0], [108.0, 102298.0], [115.0, 102350.0], [114.0, 99178.0], [113.0, 101663.0], [112.0, 100960.0], [119.0, 98669.0], [118.0, 98940.0], [117.0, 101595.0], [116.0, 99924.0], [123.0, 99044.0], [122.0, 99056.0], [121.0, 100272.0], [120.0, 99671.0], [127.0, 98437.0], [126.0, 100039.0], [125.0, 97734.0], [124.0, 98567.0], [135.0, 98316.0], [134.0, 97711.0], [133.0, 97957.0], [132.0, 96603.0], [131.0, 97471.0], [129.0, 98499.0], [128.0, 99209.0], [143.0, 96076.0], [142.0, 98322.0], [141.0, 97306.0], [140.0, 98548.0], [139.0, 97243.0], [138.0, 96804.0], [137.0, 98743.0], [136.0, 98580.0], [151.0, 97146.0], [150.0, 96135.0], [149.0, 96324.0], [148.0, 97300.0], [147.0, 95341.0], [146.0, 98462.0], [145.0, 97012.0], [144.0, 98602.0], [159.0, 94626.0], [158.0, 93237.0], [157.0, 96238.0], [156.0, 96174.0], [155.0, 95449.0], [154.0, 96055.0], [153.0, 96582.0], [152.0, 96900.0], [167.0, 92292.0], [166.0, 94731.0], [165.0, 95594.0], [164.0, 92806.0], [163.0, 94249.0], [162.0, 96551.0], [161.0, 93383.0], [160.0, 95444.0], [175.0, 92958.0], [174.0, 94188.5], [172.0, 93636.0], [170.0, 95709.0], [169.0, 92266.0], [168.0, 93211.0], [183.0, 92276.0], [182.0, 94156.0], [181.0, 94257.5], [179.0, 92714.0], [178.0, 91561.0], [177.0, 92158.0], [176.0, 93968.0], [191.0, 90417.0], [190.0, 92049.0], [189.0, 91628.0], [188.0, 94125.0], [187.0, 92650.0], [186.0, 93329.0], [185.0, 92237.0], [184.0, 91674.0], [199.0, 90712.0], [198.0, 91632.0], [197.0, 91866.0], [196.0, 90363.0], [195.0, 91716.0], [194.0, 90961.0], [193.0, 90915.0], [192.0, 90737.0], [207.0, 88698.0], [206.0, 88562.0], [205.0, 89273.0], [204.0, 92178.0], [203.0, 92110.0], [202.0, 90677.0], [201.0, 90425.0], [200.0, 89839.0], [215.0, 91246.0], [214.0, 91284.0], [213.0, 91676.0], [212.0, 91812.0], [211.0, 90730.0], [210.0, 90344.0], [209.0, 91578.0], [208.0, 89969.0], [223.0, 90503.0], [222.0, 90713.0], [221.0, 90154.0], [220.0, 91065.0], [219.0, 89719.0], [218.0, 89772.0], [217.0, 88407.0], [216.0, 89196.0], [231.0, 89408.0], [230.0, 88985.0], [229.0, 89005.0], [228.0, 87875.0], [227.0, 87315.0], [226.0, 89062.0], [225.0, 90159.0], [224.0, 89738.0], [239.0, 88185.0], [238.0, 88158.0], [237.0, 87687.0], [236.0, 89734.0], [234.0, 89946.0], [233.0, 89724.0], [232.0, 89445.0], [247.0, 88165.0], [246.0, 90005.0], [245.0, 88288.0], [244.0, 89660.0], [243.0, 88913.5], [241.0, 89441.0], [240.0, 87176.0], [255.0, 90167.0], [254.0, 87400.0], [253.0, 89407.0], [252.0, 89016.0], [249.0, 89465.0], [248.0, 87169.0], [270.0, 88687.0], [271.0, 89746.0], [269.0, 87121.0], [268.0, 87839.0], [267.0, 88894.0], [266.0, 88378.0], [264.0, 88598.0], [263.0, 87415.0], [257.0, 89103.0], [259.0, 88659.0], [258.0, 88716.0], [262.0, 87653.0], [261.0, 87433.0], [286.0, 86810.0], [287.0, 87105.0], [285.0, 86287.0], [284.0, 87703.5], [282.0, 86050.0], [281.0, 88037.0], [280.0, 86324.0], [279.0, 87745.0], [273.0, 88522.0], [272.0, 87401.0], [275.0, 87949.0], [274.0, 88443.0], [278.0, 88367.0], [277.0, 86943.0], [276.0, 88094.0], [302.0, 86091.0], [303.0, 85377.0], [301.0, 87397.0], [300.0, 88301.0], [299.0, 87823.0], [298.0, 85986.0], [297.0, 86001.0], [296.0, 88516.0], [295.0, 86717.0], [289.0, 87043.0], [288.0, 85839.0], [291.0, 86614.0], [290.0, 88063.0], [294.0, 87929.0], [293.0, 88035.5], [318.0, 88069.0], [319.0, 86287.0], [317.0, 86720.0], [316.0, 86761.0], [315.0, 87889.0], [314.0, 87726.0], [313.0, 88848.0], [312.0, 87093.0], [311.0, 86183.0], [305.0, 88935.0], [304.0, 86082.0], [307.0, 88592.0], [306.0, 86613.0], [310.0, 88959.0], [309.0, 85590.0], [308.0, 85383.0], [333.0, 84356.0], [332.0, 86360.0], [323.0, 85636.0], [322.0, 84625.0], [321.0, 85848.0], [320.0, 85655.0], [331.0, 86921.0], [330.0, 85575.0], [329.0, 85017.0], [328.0, 87735.0], [327.0, 85660.0], [326.0, 88093.0], [325.0, 84999.0], [324.0, 87385.0], [350.0, 84972.0], [351.0, 83774.0], [349.0, 84257.0], [338.0, 84010.0], [337.0, 84128.0], [336.0, 85346.66666666667], [347.0, 85254.0], [346.0, 84759.0], [345.0, 84220.5], [343.0, 86626.0], [342.0, 84328.0], [341.0, 86913.0], [340.0, 85863.0], [366.0, 85731.0], [367.0, 85338.0], [365.0, 83243.0], [364.0, 86429.0], [363.0, 83168.0], [362.0, 85340.5], [360.0, 86346.0], [359.0, 84373.0], [352.0, 84699.0], [355.0, 85138.5], [353.0, 84004.0], [358.0, 86164.0], [357.0, 86089.0], [382.0, 85036.0], [383.0, 83727.0], [381.0, 82942.0], [380.0, 82568.0], [379.0, 83894.0], [378.0, 82293.0], [376.0, 85736.0], [375.0, 83050.0], [368.0, 85908.0], [371.0, 82563.0], [370.0, 84653.0], [374.0, 82269.0], [373.0, 85683.0], [372.0, 83301.0], [397.0, 84524.0], [398.0, 83498.0], [396.0, 81576.0], [387.0, 81410.0], [386.0, 81685.0], [385.0, 83642.5], [395.0, 82864.0], [394.0, 81193.0], [393.0, 82917.0], [392.0, 83698.0], [391.0, 82574.0], [390.0, 82283.0], [389.0, 84875.0], [388.0, 81984.0], [414.0, 82809.0], [415.0, 81534.0], [413.0, 82339.0], [412.0, 82759.0], [411.0, 80773.5], [409.0, 82073.0], [408.0, 82485.0], [407.0, 83311.0], [401.0, 81790.66666666667], [403.0, 82449.0], [402.0, 80738.0], [406.0, 81180.0], [405.0, 81815.0], [404.0, 82579.0], [430.0, 82857.0], [431.0, 79251.0], [429.0, 80621.5], [419.0, 81354.0], [418.0, 80132.0], [417.0, 81860.0], [416.0, 79943.0], [427.0, 82260.0], [426.0, 82277.0], [425.0, 80851.0], [424.0, 80266.0], [423.0, 81886.0], [422.0, 80320.5], [420.0, 79369.0], [446.0, 78973.0], [447.0, 82066.0], [445.0, 80149.0], [444.0, 80781.0], [443.0, 82337.0], [442.0, 81564.0], [441.0, 80921.0], [440.0, 80786.0], [439.0, 80213.0], [432.0, 81248.0], [435.0, 79153.0], [434.0, 79143.0], [438.0, 80713.0], [437.0, 80874.0], [436.0, 79015.0], [462.0, 79060.0], [463.0, 79483.0], [461.0, 80311.0], [460.0, 80399.0], [459.0, 79718.0], [458.0, 78665.0], [457.0, 79985.0], [456.0, 78339.0], [455.0, 79390.0], [449.0, 82081.0], [448.0, 79187.0], [451.0, 79357.0], [450.0, 79350.0], [454.0, 80237.0], [453.0, 80391.0], [452.0, 79755.0], [478.0, 78270.0], [479.0, 80266.0], [477.0, 77787.0], [476.0, 78270.0], [475.0, 79098.0], [474.0, 78416.0], [473.0, 78978.0], [472.0, 81118.0], [470.0, 78706.0], [465.0, 78475.0], [464.0, 78597.0], [467.0, 79852.0], [466.0, 79185.0], [469.0, 81576.0], [468.0, 78296.0], [494.0, 78675.0], [495.0, 77072.0], [493.0, 79556.0], [492.0, 77898.0], [491.0, 80004.0], [490.0, 79866.0], [489.0, 78073.0], [488.0, 79800.0], [487.0, 77759.0], [481.0, 79150.0], [480.0, 77793.0], [483.0, 77485.0], [482.0, 78332.0], [486.0, 80611.0], [484.0, 78987.0], [510.0, 76574.0], [511.0, 78683.0], [509.0, 76543.0], [508.0, 77026.0], [507.0, 77838.5], [505.0, 77099.0], [504.0, 76635.0], [503.0, 80329.0], [497.0, 78990.0], [496.0, 77805.0], [499.0, 80456.0], [498.0, 77984.0], [502.0, 76731.0], [501.0, 76789.0], [500.0, 78653.0], [540.0, 77225.0], [543.0, 75829.0], [528.0, 77431.0], [530.0, 75407.0], [529.0, 79041.0], [533.0, 76194.0], [531.0, 75658.0], [542.0, 76059.0], [541.0, 78231.0], [539.0, 77457.0], [538.0, 75937.0], [537.0, 76810.0], [536.0, 77423.0], [527.0, 75952.0], [512.0, 77324.0], [515.0, 77926.0], [514.0, 78377.0], [517.0, 79653.0], [516.0, 78795.0], [519.0, 77636.0], [518.0, 77812.0], [526.0, 76712.0], [525.0, 78404.0], [524.0, 79453.0], [523.0, 77945.0], [522.0, 78048.0], [521.0, 76033.0], [520.0, 77803.0], [535.0, 77567.0], [534.0, 75503.0], [572.0, 73160.0], [575.0, 75888.0], [561.0, 77129.0], [560.0, 73757.0], [563.0, 74901.0], [562.0, 73489.0], [565.0, 74514.0], [564.0, 75931.0], [574.0, 74327.0], [573.0, 74540.0], [571.0, 73142.0], [570.0, 75774.0], [569.0, 75050.0], [568.0, 75143.0], [559.0, 75153.0], [545.0, 76773.0], [544.0, 78202.0], [547.0, 74983.0], [546.0, 74498.0], [549.0, 75599.0], [548.0, 77790.0], [551.0, 75246.0], [550.0, 74795.0], [558.0, 77240.0], [557.0, 74407.0], [556.0, 74457.0], [555.0, 77031.0], [554.0, 74659.0], [553.0, 76688.0], [552.0, 76077.0], [567.0, 73414.0], [566.0, 73606.0], [604.0, 73202.0], [607.0, 71510.0], [592.0, 71554.0], [594.0, 71346.0], [593.0, 71711.0], [597.0, 74711.0], [596.0, 72441.5], [606.0, 73510.0], [605.0, 71982.0], [603.0, 72625.0], [602.0, 71271.0], [601.0, 71219.0], [600.0, 71609.0], [591.0, 72348.0], [576.0, 76294.0], [578.0, 75227.0], [577.0, 73683.0], [581.0, 75120.0], [580.0, 73475.5], [583.0, 75683.0], [582.0, 72472.0], [590.0, 75246.0], [589.0, 71917.0], [588.0, 75246.0], [587.0, 74431.0], [586.0, 72473.0], [585.0, 72571.0], [584.0, 73609.0], [599.0, 71199.0], [598.0, 71861.0], [636.0, 69797.0], [639.0, 71015.0], [625.0, 69926.0], [624.0, 73192.0], [627.0, 72197.0], [626.0, 70544.0], [629.0, 69883.0], [628.0, 71218.0], [638.0, 72631.0], [637.0, 71261.0], [635.0, 72284.0], [634.0, 69180.0], [633.0, 71327.0], [632.0, 71071.0], [623.0, 71699.0], [609.0, 73892.0], [608.0, 72613.0], [611.0, 70852.0], [610.0, 73446.0], [613.0, 72674.0], [612.0, 71340.0], [615.0, 70992.0], [614.0, 70667.0], [622.0, 71192.0], [621.0, 70026.0], [620.0, 72955.0], [619.0, 70871.0], [618.0, 71399.0], [617.0, 70100.0], [616.0, 72651.0], [631.0, 69972.0], [630.0, 72622.0], [668.0, 69065.0], [671.0, 71227.0], [656.0, 71115.0], [658.0, 71546.0], [657.0, 70428.0], [660.0, 71349.0], [659.0, 70385.0], [670.0, 69727.0], [669.0, 71860.0], [667.0, 71526.0], [666.0, 71317.0], [665.0, 70720.0], [664.0, 70633.5], [655.0, 69879.5], [640.0, 70552.0], [642.0, 70723.0], [641.0, 69163.0], [645.0, 70516.0], [643.0, 70594.0], [647.0, 72431.0], [646.0, 70599.0], [653.0, 68577.0], [652.0, 68798.0], [651.0, 68644.0], [650.0, 69868.5], [648.0, 69058.0], [662.0, 69167.0], [661.0, 68414.0], [697.0, 70952.0], [702.0, 69799.5], [703.0, 67744.0], [689.0, 69009.0], [688.0, 67844.0], [691.0, 70265.0], [690.0, 68706.0], [693.0, 67474.0], [692.0, 68866.0], [700.0, 67489.0], [699.0, 69732.0], [698.0, 68220.0], [696.0, 68331.0], [678.0, 68171.0], [677.0, 68147.0], [676.0, 69940.0], [674.0, 70949.0], [673.0, 70893.0], [672.0, 71785.0], [687.0, 71136.0], [686.0, 71237.0], [685.0, 69675.0], [684.0, 71164.0], [683.0, 68080.0], [682.0, 70492.0], [681.0, 69094.0], [680.0, 69056.0], [695.0, 70705.0], [694.0, 71107.0], [729.0, 67142.5], [734.0, 67369.0], [735.0, 67663.0], [721.0, 68220.0], [720.0, 66945.0], [723.0, 68220.0], [722.0, 69994.0], [733.0, 68175.5], [731.0, 68941.0], [730.0, 66967.0], [719.0, 67739.5], [705.0, 68988.0], [704.0, 68146.0], [707.0, 66743.0], [706.0, 70003.0], [709.0, 67281.0], [708.0, 67897.0], [711.0, 69547.0], [710.0, 66797.0], [717.0, 67986.0], [716.0, 68494.0], [715.0, 68570.5], [713.0, 68574.0], [712.0, 70020.0], [727.0, 68250.0], [726.0, 66890.0], [725.0, 67664.0], [724.0, 68746.0], [764.0, 64113.0], [767.0, 66519.0], [753.0, 65838.0], [752.0, 66860.0], [755.0, 66091.0], [754.0, 64521.0], [757.0, 67470.0], [756.0, 66327.0], [766.0, 66071.0], [765.0, 64176.0], [763.0, 65539.0], [762.0, 67231.0], [761.0, 66597.0], [760.0, 66885.0], [751.0, 65117.0], [737.0, 66413.0], [736.0, 67780.0], [739.0, 66512.0], [738.0, 66599.0], [741.0, 68969.0], [740.0, 67198.0], [743.0, 66728.0], [742.0, 67431.0], [750.0, 67228.0], [749.0, 68429.0], [748.0, 65103.0], [747.0, 67329.0], [746.0, 68485.0], [745.0, 65360.0], [744.0, 68434.0], [759.0, 64653.0], [758.0, 67304.0], [796.0, 61881.0], [799.0, 62842.0], [785.0, 65542.0], [784.0, 64255.0], [787.0, 61786.0], [786.0, 64627.0], [789.0, 63134.0], [788.0, 61411.0], [798.0, 63319.0], [797.0, 64167.0], [795.0, 62812.0], [794.0, 64546.0], [793.0, 63309.0], [792.0, 63914.0], [783.0, 63997.0], [768.0, 63123.0], [770.0, 63851.0], [769.0, 64913.0], [772.0, 62873.0], [771.0, 64010.0], [775.0, 64289.5], [773.0, 63866.0], [782.0, 64980.0], [781.0, 62081.0], [780.0, 63923.0], [779.0, 62530.0], [778.0, 64475.0], [777.0, 64268.0], [776.0, 65127.0], [791.0, 61849.0], [790.0, 62516.0], [828.0, 61081.0], [831.0, 59393.0], [817.0, 61387.0], [816.0, 62226.0], [819.0, 58976.0], [818.0, 60955.0], [821.0, 59500.0], [820.0, 60041.0], [830.0, 60552.0], [829.0, 59026.0], [827.0, 58787.0], [826.0, 58558.0], [825.0, 60892.0], [824.0, 60141.0], [815.0, 60687.0], [800.0, 62707.0], [802.0, 60109.0], [801.0, 62455.0], [805.0, 62268.5], [803.0, 61663.0], [807.0, 60148.0], [806.0, 60142.0], [814.0, 60413.5], [812.0, 60030.5], [810.0, 59888.0], [809.0, 59277.0], [808.0, 63033.0], [823.0, 60761.0], [822.0, 59324.0], [857.0, 57691.0], [861.0, 58761.0], [863.0, 58656.5], [849.0, 57511.0], [848.0, 57719.0], [851.0, 60392.0], [850.0, 59052.0], [853.0, 58089.0], [852.0, 56906.0], [860.0, 58289.0], [859.0, 58782.0], [858.0, 59031.0], [856.0, 57627.0], [839.0, 58819.0], [838.0, 58348.0], [836.0, 58524.0], [835.0, 58050.0], [834.0, 61136.0], [833.0, 60550.0], [832.0, 58315.0], [847.0, 57732.0], [846.0, 59517.0], [845.0, 58299.0], [844.0, 60785.0], [843.0, 59367.0], [842.0, 57237.0], [841.0, 61036.0], [840.0, 57527.0], [855.0, 60327.0], [854.0, 58610.0], [888.0, 53703.0], [894.0, 54646.5], [895.0, 54683.0], [881.0, 55660.0], [880.0, 56433.0], [883.0, 55370.0], [882.0, 54549.0], [892.0, 51808.0], [891.0, 53942.0], [889.0, 55538.0], [879.0, 54553.0], [865.0, 56967.0], [864.0, 59466.0], [867.0, 57385.0], [866.0, 55533.0], [869.0, 57151.0], [868.0, 55575.0], [871.0, 58995.0], [870.0, 58418.0], [878.0, 56789.0], [877.0, 54534.0], [876.0, 55075.0], [875.0, 54834.0], [874.0, 56494.0], [873.0, 56260.0], [872.0, 56099.0], [887.0, 54866.0], [886.0, 54988.0], [885.0, 56048.0], [884.0, 56744.0], [921.0, 49890.0], [926.0, 49943.0], [927.0, 49654.0], [913.0, 51211.0], [912.0, 51644.0], [915.0, 48321.0], [914.0, 51408.0], [917.0, 49956.0], [916.0, 49309.0], [925.0, 48844.0], [924.0, 48438.5], [922.0, 49694.0], [920.0, 49480.0], [903.0, 53008.0], [902.0, 51522.0], [901.0, 51605.0], [900.0, 52861.0], [899.0, 52941.0], [898.0, 52502.0], [897.0, 53582.0], [896.0, 51580.0], [911.0, 51509.0], [910.0, 50266.0], [909.0, 52352.0], [908.0, 52396.0], [907.0, 51711.0], [906.0, 50485.0], [905.0, 51632.0], [904.0, 50639.0], [919.0, 50930.0], [918.0, 50190.0], [956.0, 37181.0], [959.0, 30026.0], [945.0, 42483.0], [944.0, 43677.0], [947.0, 42216.0], [946.0, 42688.0], [949.0, 41883.0], [948.0, 42562.0], [958.0, 32003.0], [957.0, 37805.0], [955.0, 37675.0], [954.0, 39481.0], [953.0, 38410.0], [952.0, 39566.0], [943.0, 44134.0], [929.0, 48409.0], [928.0, 49255.0], [931.0, 47445.0], [930.0, 49863.0], [933.0, 49329.0], [932.0, 49358.0], [935.0, 47425.0], [934.0, 47869.0], [942.0, 46042.0], [941.0, 43883.0], [940.0, 43806.0], [939.0, 45593.0], [938.0, 46696.0], [937.0, 45330.0], [936.0, 48631.0], [951.0, 41291.0], [950.0, 41004.0], [988.0, 14648.0], [991.0, 13161.0], [977.0, 19740.0], [976.0, 20190.0], [979.0, 19916.0], [978.0, 19885.0], [981.0, 18941.0], [980.0, 19238.0], [990.0, 12636.0], [989.0, 14321.0], [987.0, 14294.0], [986.0, 15623.0], [985.0, 15708.0], [984.0, 16642.0], [975.0, 21672.0], [961.0, 29993.0], [960.0, 32461.0], [963.0, 28613.0], [962.0, 29212.0], [965.0, 28321.0], [964.0, 28810.0], [967.0, 27553.0], [966.0, 27761.0], [974.0, 21426.0], [973.0, 21825.0], [972.0, 22432.0], [971.0, 22931.0], [970.0, 25191.0], [969.0, 26278.0], [968.0, 26179.0], [983.0, 18324.0], [982.0, 18479.0], [1000.0, 5735.0], [999.0, 6192.0], [998.0, 6511.0], [997.0, 8830.0], [996.0, 9249.0], [995.0, 10598.0], [994.0, 12134.0], [993.0, 12860.0], [992.0, 12822.0], [1.0, 393420.0]], "isOverall": false, "label": "hit_search_trains", "isController": false}, {"data": [[500.5609999999998, 77805.92499999999]], "isOverall": false, "label": "hit_search_trains-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.67437686E12, "maxY": 3809643.283333333, "series": [{"data": [[1.67437698E12, 138173.38333333333], [1.67437686E12, 972208.6666666666], [1.67437722E12, 55.75], [1.67437704E12, 4934.6], [1.67437692E12, 3809643.283333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.67437698E12, 57.86666666666667], [1.67437686E12, 407.1333333333333], [1.67437722E12, 0.0], [1.67437704E12, 2.066666666666667], [1.67437692E12, 1595.4666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67437722E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 46472.44444444443, "minX": 1.67437686E12, "maxY": 393420.0, "series": [{"data": [[1.67437698E12, 140423.24999999997], [1.67437686E12, 46472.44444444443], [1.67437722E12, 393420.0], [1.67437704E12, 189835.0], [1.67437692E12, 83017.1955958549]], "isOverall": false, "label": "hit_search_trains", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67437722E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.67437686E12, "maxY": 30076.0, "series": [{"data": [[1.67437698E12, 27231.214285714286], [1.67437686E12, 16795.25757575758], [1.67437722E12, 0.0], [1.67437704E12, 30076.0], [1.67437692E12, 27727.729274611414]], "isOverall": false, "label": "hit_search_trains", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67437722E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 206.0, "minX": 1.67437686E12, "maxY": 497.11111111111114, "series": [{"data": [[1.67437698E12, 416.78571428571433], [1.67437686E12, 497.11111111111114], [1.67437722E12, 206.0], [1.67437704E12, 210.0], [1.67437692E12, 459.3005181347154]], "isOverall": false, "label": "hit_search_trains", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67437722E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5735.0, "minX": 1.67437686E12, "maxY": 189835.0, "series": [{"data": [[1.67437698E12, 179526.0], [1.67437686E12, 63033.0], [1.67437704E12, 189835.0], [1.67437692E12, 122561.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.67437698E12, 121415.0], [1.67437686E12, 5735.0], [1.67437704E12, 189835.0], [1.67437692E12, 60109.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.67437698E12, 177369.1], [1.67437686E12, 60340.0], [1.67437704E12, 189835.0], [1.67437692E12, 102119.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.67437698E12, 179526.0], [1.67437686E12, 62320.54000000001], [1.67437704E12, 189835.0], [1.67437692E12, 115582.04999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.67437698E12, 131457.5], [1.67437686E12, 51808.0], [1.67437704E12, 189835.0], [1.67437692E12, 81570.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.67437698E12, 179418.45], [1.67437686E12, 61086.5], [1.67437704E12, 189835.0], [1.67437692E12, 109325.1]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67437704E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 40682.0, "minX": 1.0, "maxY": 393420.0, "series": [{"data": [[2.0, 102418.5], [32.0, 79918.5], [38.0, 70483.5], [3.0, 80218.0], [49.0, 88185.0], [4.0, 40682.0], [5.0, 54988.0], [6.0, 106440.5], [7.0, 96154.5], [8.0, 62759.5], [9.0, 55515.0], [10.0, 81072.5], [11.0, 100066.0], [12.0, 61993.5], [13.0, 60687.0], [14.0, 64057.5], [15.0, 83927.5], [1.0, 80090.0], [16.0, 85754.0], [17.0, 75829.0], [18.0, 86045.0], [19.0, 71982.0], [21.0, 79028.0], [25.0, 78987.0], [26.0, 77869.0], [27.0, 68146.0], [30.0, 86902.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 393420.0], [9.0, 53582.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 49.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 36784.0, "series": [{"data": [[2.0, 14324.0], [32.0, 24345.5], [38.0, 25369.0], [3.0, 18545.0], [49.0, 22897.0], [4.0, 10801.0], [5.0, 17239.0], [6.0, 21750.5], [7.0, 23249.0], [8.0, 14674.5], [9.0, 18196.0], [10.0, 26526.5], [11.0, 25183.0], [12.0, 20337.5], [13.0, 20057.0], [14.0, 24021.5], [15.0, 27778.5], [1.0, 9241.0], [16.0, 27284.5], [17.0, 27507.0], [18.0, 26038.5], [19.0, 36784.0], [21.0, 24769.5], [25.0, 27737.0], [26.0, 26229.5], [27.0, 25000.0], [30.0, 28153.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [9.0, 11276.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 49.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9166666666666666, "minX": 1.6743768E12, "maxY": 15.75, "series": [{"data": [[1.6743768E12, 15.75], [1.67437686E12, 0.9166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67437686E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.67437686E12, "maxY": 12.866666666666667, "series": [{"data": [[1.67437686E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.67437698E12, 0.4666666666666667], [1.67437686E12, 3.283333333333333], [1.67437704E12, 0.016666666666666666], [1.67437692E12, 12.866666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.67437722E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67437722E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.67437686E12, "maxY": 12.866666666666667, "series": [{"data": [[1.67437698E12, 0.4666666666666667], [1.67437686E12, 3.283333333333333], [1.67437704E12, 0.016666666666666666], [1.67437692E12, 12.866666666666667]], "isOverall": false, "label": "hit_search_trains-success", "isController": false}, {"data": [[1.67437686E12, 0.016666666666666666], [1.67437722E12, 0.016666666666666666]], "isOverall": false, "label": "hit_search_trains-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67437722E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.67437686E12, "maxY": 12.866666666666667, "series": [{"data": [[1.67437698E12, 0.4666666666666667], [1.67437686E12, 3.283333333333333], [1.67437704E12, 0.016666666666666666], [1.67437692E12, 12.866666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.67437686E12, 0.016666666666666666], [1.67437722E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67437722E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

